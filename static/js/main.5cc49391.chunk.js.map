{"version":3,"sources":["styles/AppBox.ts","styles/main/MainBox.ts","styles/main/HeaderBox.ts","reducers/user.ts","components/main/Header.tsx","styles/main/MainMenuBox.ts","config/firebase.ts","components/main/MainMenu.tsx","styles/main/RoomListBox.ts","styles/main/RoomItemBox.ts","components/main/RoomItem.tsx","components/main/RoomList.tsx","components/main/Main.tsx","styles/chat/RoomBox.ts","styles/chat/ChatBox.ts","styles/chat/ChatUsersBox.ts","components/chat/ChatUsers.tsx","styles/chat/MessagesBox.ts","components/chat/Messages.tsx","styles/chat/MessageInputBox.ts","components/chat/MessageInput.tsx","styles/chat/RoomButtonBox.ts","components/chat/RoomButton.tsx","components/chat/Chat.tsx","styles/agora/AgoraBox.ts","components/agora/Agora.tsx","components/agora/Icons.tsx","components/chat/Room.tsx","styles/auth/LoginBox.ts","components/auth/Login.tsx","styles/auth/SignUpBox.ts","components/auth/SignUp.tsx","App.tsx","styles/GlobalStyle.ts","reducers/index.ts","sagas/user.ts","sagas/index.ts","index.tsx"],"names":["AppBox","styled","div","MainBox","HeaderBox","initialState","uid","name","email","imageURL","isLoadingUser","loadUserErrorReason","SET_USER_REQUEST","LOGIN_USER_REQUEST","LOGIN_USER_SUCCESS","LOGIN_USER_FAILURE","LOGOUT_USER_REQUEST","SIGNUP_USER_REQUEST","SIGNUP_USER_SUCCESS","SIGNUP_USER_FAILURE","userReducer","state","action","type","payload","error","Header","dispatch","useDispatch","useSelector","user","className","src","onClick","MainMenuBox","firebaseApp","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","db","firestore","MainMenu","useState","setName","chatRef","collection","userRoomsRef","doc","placeholder","onChange","event","target","value","add","then","ref","set","id","catch","alert","RoomListBox","RoomItemBox","RoomItem","people","inside","history","useHistory","push","RoomList","rooms","setRooms","roomNames","setRoomNames","roomUsers","setRoomUsers","roomRef","useEffect","onSnapshot","snapshot","data","docs","map","snapshot_doc","filter","element","names","users","forEach","roomId","snapshot_chat","snapshot_users","length","index","Main","RoomBox","ChatBox","ChatUsersBox","ChatUsers","connections","setConnections","chatUserRef","connection","Object","keys","userId","snapshot_line","console","profileImage","alt","MessagesBox","ul","Messages","chats","setChats","orderBy","snapshot_message","message","from","content","MessageInputBox","MessageInput","inputString","setInputString","chatMessageRef","textArea","useRef","resize","current","style","height","scrollHeight","toString","onClickSend","timeStamp","Date","getTime","log","onKeyUp","onKeyDown","keyCode","shiftKey","preventDefault","UserAddModal","RoomButtonBox","RoomButton","userNameInput","setUserNameInput","displayModal","setDisplayModal","userRef","userRoomRef","test","where","get","snapShot","userSnap","prev","Chat","AgoraBox","client","AgoraRTC","createClient","mode","codec","localTracks","videoTrack","undefined","audioTrack","options","token","Agora","my_uid","joined","setJoined","myVideo","setMyVideo","myAudio","setMyAudio","publishedUids","setPublishedUids","unpublishedUid","setUnpublishedUid","joinChannel","window","addEventListener","leaveChannel","removeEventListener","a","on","userPublished","userUnpublished","join","getMicrophones","hasAudio","getCameras","hasVideo","createMicrophoneAudioTrack","createCameraVideoTrack","clientArray","play","publish","trackName","track","stop","close","unpublish","leave","setEnabled","isPlaying","mediaType","publishedUser","userSubscribe","userUnsubscribe","subscribe","findIndex","splice","displayName","viewBox","enable-background","width","d","overflow","font-family","isOfflineForFirestore","isOnlineForFirestore","Room","match","params","setUsers","userStatusFirestoreRef","userStatusDatabaseRef","database","leaveEvent","val","onDisconnect","usersId","userData","snapshot_user","LoginWrapper","LoginBox","Login","setEmail","password","setPassword","onChangeInput","setState","emailCheck","pwCheck","to","SignUpWrapper","SignUpBox","SignUp","checkPassword","setCheckPassword","img","setImg","nameCorrect","setNameCorrect","emailCorrect","setEmailCorrect","pwCorrect","setPwCorrect","pwCheckCorrect","setPwCheckCorrect","URL","createObjectURL","accept","files","nameCheck","isPwDiff","image","App","auth","onAuthStateChanged","photoURL","path","component","exact","GlobalStyle","createGlobalStyle","rootReducer","combineReducers","LogInUser","watchLogInUser","LogOutUser","watchLogOutUser","signUpUser","watchSignUpUser","userSaga","LogInUserAPI","signInWithEmailAndPassword","call","result","put","takeLatest","signOut","signUpUserAPI","createUserWithEmailAndPassword","StorageRef","storage","getDownloadURL","updateProfile","all","fork","rootSaga","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5cc49391.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst AppBox = styled.div`\r\n    width: 100vw;\r\n    min-height: 100vh;\r\n`;\r\n\r\nexport default AppBox;","import styled from 'styled-components';\r\n\r\nconst MainBox = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    padding: 75px 10px 0 0;\r\n    background-color: #eff5f7;\r\n\r\n    display: flex;\r\n`;\r\n\r\nexport default MainBox;","import styled from 'styled-components';\r\n\r\nconst HeaderBox = styled.div`\r\n    width: 100%;\r\n    height: 75px;\r\n    padding: 0 30px;\r\n\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n\r\n    color: #f8f8f8;\r\n    background-color: #66bb6a;\r\n    box-shadow: 0 1px 2.94px 0.06px rgb(4 26 55 / 16%);\r\n\r\n    .Header-Button {\r\n        width: 115px;\r\n        height: 45px;\r\n        padding: 0;\r\n\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        line-height: 1.5;\r\n        border-radius: .5rem;\r\n        border-color: rgba(31, 21, 52, 0.85);\r\n        color: #fff;\r\n        background-color: rgba(31, 21, 52, 0.85);\r\n    }\r\n\r\n    .Header-Logo{\r\n        font-family: 'Dancing Script', cursive;\r\n        \r\n        -ms-user-select: none; \r\n        -moz-user-select: -moz-none;\r\n        -khtml-user-select: none;\r\n        -webkit-user-select: none;\r\n        user-select: none;\r\n\r\n        font-size: 40px;\r\n        color: #f8f8f8;\r\n    }\r\n    .Header-Profile{\r\n        display: flex;\r\n        align-items: center;\r\n    }\r\n    .Header-Profile-Image{\r\n        width: 50px;\r\n        height: 50px;\r\n\r\n        border-radius: 50%;\r\n    }\r\n    .Header-Profile-Name{\r\n        width: 100px;\r\n        height: 25px;\r\n        margin: 0;\r\n        margin-left: 20px;\r\n        \r\n        font-size: 16px;\r\n        color: #f8f8f8;\r\n        overflow: hidden;\r\n\r\n        display: flex;\r\n        align-items: center;\r\n        flex-wrap: nowrap;\r\n\r\n        strong {\r\n            padding-left: 5px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default HeaderBox;","// State\r\nexport type StateType = {\r\n    uid: string,\r\n    name: string,\r\n    email: string,\r\n    imageURL: string,\r\n    isLoadingUser: boolean,\r\n    loadUserErrorReason: string,\r\n};\r\n\r\nconst initialState: StateType = {\r\n    uid: '',\r\n    name: '',\r\n    email: '',\r\n    imageURL: '',\r\n    isLoadingUser: false,\r\n    loadUserErrorReason: '',\r\n};\r\n\r\n// Actions\r\n// action.type 이 string 으로 추론되지 않고 실제 문자열 값으로 추론 되도록 하고\r\n// with createActions\r\nexport const SET_USER_REQUEST = 'SET_USER_REQUEST' as const;\r\nexport const Set_User_Success = (data: any) => ({\r\n    type: SET_USER_REQUEST,\r\n    payload: data,\r\n});\r\n\r\nexport const LOGIN_USER_REQUEST = 'LOGIN_USER_REQUEST' as const;\r\nexport const LOGIN_USER_SUCCESS = 'LOGIN_USER_SUCCESS' as const;\r\nexport const LOGIN_USER_FAILURE = 'LOGIN_USER_FAILURE' as const;\r\nexport const LogIn_User_Request = (data: any) => ({\r\n    type: LOGIN_USER_REQUEST,\r\n    payload: data,\r\n});\r\nexport const LogIn_User_Success = (data: any) => ({\r\n    type: LOGIN_USER_SUCCESS,\r\n    payload: data,\r\n});\r\nexport const LogIn_User_Failure = (error: string) => ({\r\n    type: LOGIN_USER_FAILURE,\r\n    error: error,\r\n});\r\n\r\nexport const LOGOUT_USER_REQUEST = 'LOGOUT_USER_REQUEST' as const;\r\nexport const LogOut_User_Request = () => ({ type: LOGOUT_USER_REQUEST });\r\n\r\nexport const SIGNUP_USER_REQUEST = 'SIGNUP_USER_REQUEST' as const;\r\nexport const SIGNUP_USER_SUCCESS = 'SIGNUP_USER_SUCCESS' as const;\r\nexport const SIGNUP_USER_FAILURE = 'SIGNUP_USER_FAILURE' as const;\r\nexport const SignUp_User_Request = (data: any) => ({\r\n    type: SIGNUP_USER_REQUEST,\r\n    payload: data,\r\n});\r\nexport const SignUp_User_Success = (data: any) => ({\r\n    type: SIGNUP_USER_SUCCESS,\r\n    payload: data,\r\n});\r\nexport const SignUp_User_Failure = (error: string) => ({\r\n    type: SIGNUP_USER_FAILURE,\r\n    error: error,\r\n});\r\n\r\n// Actions -- Types\r\ntype userAction =\r\n    |   ReturnType<typeof Set_User_Success>\r\n    |   ReturnType<typeof LogIn_User_Request>\r\n    |   ReturnType<typeof LogIn_User_Success>\r\n    |   ReturnType<typeof LogIn_User_Failure>\r\n    |   ReturnType<typeof LogOut_User_Request>\r\n    |   ReturnType<typeof SignUp_User_Request>\r\n    |   ReturnType<typeof SignUp_User_Success>\r\n    |   ReturnType<typeof SignUp_User_Failure>\r\n\r\n// Reducer\r\nfunction userReducer (\r\n    state: StateType = initialState,\r\n    action: userAction\r\n): StateType {\r\n    switch (action.type) {\r\n        case SET_USER_REQUEST:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        // 로그인\r\n        case LOGIN_USER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoadingUser: true,\r\n            }\r\n        case LOGIN_USER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isLoadingUser: false,\r\n            }\r\n        case LOGIN_USER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoadingUser: false,\r\n                loadUserErrorReason: action.error\r\n            }\r\n        // 로그아웃\r\n        case LOGOUT_USER_REQUEST:\r\n            return {\r\n                uid: '',\r\n                name: '',\r\n                email: '',\r\n                imageURL: '',\r\n                isLoadingUser: false,\r\n                loadUserErrorReason: '',\r\n            }\r\n        // 회원가입\r\n        case SIGNUP_USER_REQUEST:\r\n            return {\r\n                ...state,\r\n                isLoadingUser: true,\r\n            }\r\n        case SIGNUP_USER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                isLoadingUser: false,\r\n            }\r\n        case SIGNUP_USER_FAILURE:\r\n            return {\r\n                ...state,\r\n                isLoadingUser: false,\r\n                loadUserErrorReason: action.error\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;\r\n\r\n// 사용할 때 \r\n/*\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\nimport { Load_Data_Request } from reducers/test;\r\n\r\n// 데이터 사용\r\nconst data = useSelector((state: RootState) => state.test.data);\r\n// 액션 Dispatch\r\nconst dispatch = useDispatch();\r\n\r\n    //...\r\n    dispatch(Load_Data_Request());\r\n*/","import React from 'react';\r\nimport HeaderBox from 'styles/main/HeaderBox';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\nimport { LogOut_User_Request } from 'reducers/user';\r\n\r\nconst Header: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { uid, name, imageURL } = useSelector((state: RootState) => state.user);\r\n\r\n    const onClickLogout = () => {\r\n        dispatch(LogOut_User_Request());\r\n    }\r\n\r\n    return (\r\n        <HeaderBox>\r\n            <div className=\"Header-Logo\">WebRTC</div>\r\n            {uid\r\n            ?\r\n            <section className=\"Header-Profile\">\r\n                <img\r\n                    className=\"Header-Profile-Image\"\r\n                    src={imageURL ? imageURL : 'Profile.png'}\r\n                    />\r\n                <p className=\"Header-Profile-Name\">\r\n                    {name}\r\n                    <strong>\r\n                        님!\r\n                    </strong>\r\n                </p>\r\n                <button\r\n                    className=\"Delete-Button Header-Button\"\r\n                    onClick={onClickLogout}\r\n                    >\r\n                    로그아웃\r\n                </button>\r\n            </section>\r\n            :\r\n            <section>\r\n                <button className=\"Delete-Button\">\r\n                    로그인\r\n                </button>\r\n                <button className=\"Delete-Button\">\r\n                    회원가입\r\n                </button>\r\n            </section>\r\n            }\r\n        </HeaderBox>\r\n    );\r\n};\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nconst MainMenuBox = styled.div`\r\n    min-width: 300px;\r\n    height: 100%;\r\n    padding: 30px 10px 10px;\r\n    background-color: #ffffff;\r\n    \r\n    display: absolute;\r\n\r\n    .MainMenu-Name-Title {\r\n        margin: 0 0 10px 0;\r\n        font-size: 16px;\r\n    }\r\n\r\n    .MainMenu-Name-Section {\r\n        display: flex;\r\n    }\r\n\r\n    .MainMenu-Name-Input {\r\n        width: 250px;\r\n        height: 40px;\r\n        padding: 0 10px;\r\n\r\n        font-size: 14px;\r\n        color: rgba(17, 45, 88, 0.9);\r\n        border-bottom: 1px solid #112d58;\r\n\r\n        :focus {\r\n            border: 2px solid #112d58;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n\r\n    .MainMenu-Name-Button {\r\n        width: 50px;\r\n        \r\n        border-radius: 5px;\r\n        color: #ffffff;\r\n        background-color: #66bb6a;\r\n    }\r\n`;\r\n\r\nexport default MainMenuBox;","import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: process.env.REACT_APP_FIREBASE_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_authDomain,\r\n  projectId: process.env.REACT_APP_FIREBASE_projectId,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_storageBucket,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_messagingSenderId,\r\n  appId: process.env.REACT_APP_FIREBASE_appId\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\nexport { db, firebaseApp };","import React, { useState } from 'react';\r\nimport MainMenuBox from 'styles/main/MainMenuBox';\r\nimport { db } from 'config/firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\n\r\nconst MainMenu: React.FC = () => {\r\n    const { uid } = useSelector((state: RootState) => state.user);\r\n    const [name, setName] = useState<string>('');\r\n\r\n    const chatRef = db.collection('Chat');\r\n    const userRoomsRef = db.collection('UserRooms').doc(uid).collection('Rooms');\r\n\r\n    const addRoom = () => {\r\n        if(name){\r\n            chatRef.add({\r\n                name,\r\n            })\r\n            .then((ref) => {\r\n                ref.collection('Users').doc(uid).set({ state: false });\r\n                userRoomsRef.doc(ref.id).set({ state: true });\r\n            })\r\n            .catch(() => {\r\n                alert('에러가 발생했습니다!');\r\n            });\r\n\r\n        }\r\n        else {\r\n            alert('방 이름을 입력하세요!');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MainMenuBox>\r\n            <section>\r\n                <p className=\"MainMenu-Name-Title\">채팅 이름</p>\r\n                <section className=\"MainMenu-Name-Section\">\r\n                    <input\r\n                        className=\"Delete-Button MainMenu-Name-Input\"\r\n                        placeholder=\"채팅 이름\"\r\n                        onChange={(event) => {setName(event.target.value)}}\r\n                        value={name}\r\n                        />\r\n                    <button className=\"Delete-Button MainMenu-Name-Button\"\r\n                        onClick={addRoom}\r\n                        >\r\n                        추가\r\n                    </button>\r\n                </section>\r\n            </section>\r\n        </MainMenuBox>\r\n    );\r\n};\r\n\r\nexport default MainMenu;","import styled from 'styled-components';\r\n\r\nconst RoomListBox = styled.div`\r\n    width: 100%;\r\n    padding: 30px;\r\n    overflow: auto;\r\n    /* overflow-y: hidden; */\r\n`;\r\n\r\nexport default RoomListBox;","import styled from 'styled-components';\r\n\r\nconst RoomItemBox = styled.div`\r\n    margin-top: 15px;\r\n    padding: 20px;\r\n    :first-child {\r\n        margin-top: 0;\r\n    }\r\n\r\n    background-color: #ffffff;\r\n    box-shadow: 0 1px 20px 0 rgb(69 90 100 / 8%);\r\n    border-radius: 10px;\r\n    cursor: pointer;\r\n\r\n    .RoomItem-Title {\r\n        margin: 0 0 8px;\r\n        color: #66bb6a;\r\n    }\r\n\r\n    .RoomItem-People {\r\n        color: #7D7987;\r\n    }\r\n`;\r\n\r\nexport default RoomItemBox;","import React from 'react';\r\nimport RoomItemBox from 'styles/main/RoomItemBox';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\ntype RoomItemPropType = {\r\n    id: string,\r\n    name: string,\r\n    people: number,\r\n    inside: number,\r\n}\r\n\r\nconst RoomItem: React.FC<RoomItemPropType> = ({ id, name, people, inside }) => {\r\n    const history = useHistory();\r\n    const onClickRoomItem = () => {\r\n        history.push('/chat/' + id);\r\n    }\r\n    \r\n    return (\r\n        <RoomItemBox\r\n            onClick={onClickRoomItem}\r\n            >\r\n            <h2 className=\"RoomItem-Title\">{name}</h2>\r\n            <div className=\"RoomItem-People\">참여자 수 : {inside} / {people}</div>\r\n        </RoomItemBox>\r\n    );\r\n};\r\n\r\nexport default RoomItem;","import React, { useState, useEffect } from 'react';\r\nimport RoomListBox from 'styles/main/RoomListBox';\r\nimport RoomItem from 'components/main/RoomItem';\r\nimport { db } from 'config/firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\n\r\nconst RoomList: React.FC = () => {\r\n    const { uid } = useSelector((state: RootState) => state.user);\r\n    const [rooms, setRooms] = useState<any>([]);\r\n    const [roomNames, setRoomNames] = useState<any>({});\r\n    const [roomUsers, setRoomUsers] = useState<any>({});\r\n    const roomRef = db.collection('UserRooms').doc(uid).collection('Rooms');\r\n\r\n    useEffect(() => {\r\n        // 접속할 수 있는 방을 나타내고 uid 를 통해 접속\r\n        roomRef.onSnapshot((snapshot) => {\r\n            const data = snapshot.docs.map((snapshot_doc) => {\r\n                if (snapshot_doc.data().state){\r\n                    return snapshot_doc.id\r\n                }\r\n            });\r\n            data.filter((element) => element);\r\n            setRooms([...data]);\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let names = {};\r\n        let users = {};\r\n        rooms.forEach((roomId: string) => {\r\n            // 이름을 찾아서 State에 적용\r\n            const chatRef = db.collection('Chat').doc(roomId);\r\n            chatRef.onSnapshot((snapshot_chat) => {\r\n                if (snapshot_chat.data() && (snapshot_chat.data() as any).name){\r\n                    names = {\r\n                        ... names,\r\n                        [roomId]: (snapshot_chat.data() as any).name,\r\n                    };\r\n                }\r\n                setRoomNames(names);\r\n            })\r\n            // 유저 수를 찾아서 State에 적용\r\n            chatRef.collection('Users').onSnapshot((snapshot_users) => {\r\n                let inside = 0;\r\n                snapshot_users.docs.forEach((user) => {\r\n                    if(user.data() && user.data().state){\r\n                        inside += 1;\r\n                    }\r\n                });\r\n                users = {\r\n                    ...users,\r\n                    [roomId]: {\r\n                        people: snapshot_users.docs.length,\r\n                        inside\r\n                    },\r\n                };\r\n                setRoomUsers(users);\r\n            });\r\n        }, {});\r\n    }, [rooms]);\r\n\r\n    return (\r\n        <RoomListBox>\r\n            {rooms.map((roomId: any, index: number) => {\r\n                if (roomNames[roomId] && roomUsers[roomId]) {\r\n                    const name = roomNames[roomId];\r\n                    const { people, inside } = roomUsers[roomId];\r\n                    return (\r\n                        <RoomItem\r\n                            key={index}\r\n                            id={roomId}\r\n                            name={name}\r\n                            people={people}\r\n                            inside={inside}\r\n                            />\r\n                    );\r\n                }\r\n            })}\r\n        </RoomListBox>\r\n    );\r\n};\r\n\r\nexport default RoomList;","import React from 'react';\r\nimport MainBox from 'styles/main/MainBox';\r\nimport Header from 'components/main/Header';\r\nimport MainMenu from 'components/main/MainMenu';\r\nimport RoomList from 'components/main/RoomList';\r\n\r\nconst Main: React.FC = () => {\r\n    return (\r\n        <MainBox>\r\n            <Header/>\r\n            <MainMenu/>\r\n            <RoomList/>\r\n        </MainBox>\r\n    );\r\n};\r\n\r\nexport default Main;","import styled from 'styled-components';\r\n\r\nconst RoomBox = styled.div`\r\n    width: 100%;\r\n    height: 100vh;\r\n\r\n    display: flex;\r\n    justify-content: flex-end;\r\n`;\r\n\r\nexport default RoomBox;","import styled from 'styled-components';\r\n\r\nconst ChatBox = styled.div`\r\n    min-width: 300px;\r\n    height: 100vh;\r\n    padding: 10px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    background-color: #eff5f7;\r\n    box-shadow: 0 1px 20px 0 rgb(69 90 100 / 8%);\r\n\r\n    .Chat-Message-Wrapper {\r\n        width: 100%;\r\n        height: 70%;\r\n        padding: 10px;\r\n        flex: 1;\r\n\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: flex-end;\r\n\r\n        background-color: #ffffff;\r\n        border-radius: 10px;\r\n    }\r\n`;\r\n\r\nexport default ChatBox;","import styled from 'styled-components';\r\n\r\nconst ChatUsersBox = styled.div`\r\n    width: 100%;\r\n    height: 200px;\r\n    padding: 10px;\r\n    margin-bottom: 10px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    background-color: #ffffff;\r\n    border-radius: 10px;\r\n\r\n    .ChatUser{\r\n        margin-top: 10px;\r\n        display: flex;\r\n        flex-wrap: nowrap;\r\n        align-items: center;\r\n\r\n        :first-child {\r\n            margin-top: 0;\r\n        }\r\n    }\r\n\r\n    .ChatUser-Profile {\r\n        width: 40px;\r\n        height: 40px;\r\n        margin: 0 10px;\r\n\r\n        border-radius: 50%;\r\n    }\r\n\r\n    .ChatUser-Name {\r\n        margin: 0;\r\n        flex: 1;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n    }\r\n`;\r\n\r\nexport default ChatUsersBox;","import React, { useEffect, useState } from 'react';\r\nimport ChatUsersBox from 'styles/chat/ChatUsersBox';\r\nimport { db } from 'config/firebase';\r\n\r\ntype ChatUsersPropType = {\r\n    id: string,\r\n    users: any,\r\n}\r\n\r\nconst ChatUsers: React.FC<ChatUsersPropType> = ({ id, users }) => {\r\n    const [connections, setConnections] = useState<any>([]);\r\n\r\n    const chatUserRef = db.collection('Chat').doc(id).collection('Users');\r\n\r\n    useEffect(() => {\r\n        let connection = {};\r\n        Object.keys(users).map((userId) => {\r\n            // User Online & Offline Snapshot\r\n            chatUserRef.doc(userId).onSnapshot((snapshot_line) => {\r\n                if (snapshot_line.data()){\r\n                    connection = {\r\n                        ...connection,\r\n                        [userId]: (snapshot_line.data() as any).state || false\r\n                    };\r\n                }\r\n                setConnections(connection);\r\n            }, (error) => console.error(error));\r\n        }, []);\r\n    // IF users Changed, We need to Change Memory Ref\r\n    }, [users])\r\n\r\n    const displayUsers = () => {\r\n        return Object.keys(connections).map((userId, index) => {\r\n            if(connections[userId] && users[userId]){\r\n                const { name, profileImage } = users[userId];\r\n                return (\r\n                    <section className=\"ChatUser\" key={index}>\r\n                        <img className=\"ChatUser-Profile\"\r\n                            src={profileImage}\r\n                            alt=\"User_Profile\"\r\n                            />\r\n                        <p className=\"ChatUser-Name\">\r\n                            {name}\r\n                        </p>\r\n                    </section>\r\n                );\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <ChatUsersBox>\r\n            {displayUsers()}\r\n        </ChatUsersBox>\r\n    );\r\n};\r\n\r\nexport default ChatUsers;","import styled from 'styled-components';\r\n\r\nconst MessagesBox = styled.ul`\r\n    width: 300px;\r\n    height: 100%;\r\n    padding: 10px 0;\r\n    margin: 0;\r\n    list-style: none;\r\n    overflow: auto;\r\n    /* overflow-y: hidden; */\r\n\r\n    display: flex;\r\n    flex-direction: column-reverse;\r\n\r\n    .Message-Wrapper {\r\n        display: flex;\r\n        flex-direction: column;\r\n        flex-wrap: nowrap;\r\n    }\r\n\r\n    .Message-User {\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n    }\r\n    \r\n    .Message-User-Image {\r\n        width: 30px;\r\n        height: 30px;\r\n        margin: 0 10px 0 0;\r\n\r\n        border-radius: 50%;\r\n    }\r\n\r\n    .Message-User-Name {\r\n        margin: 0;\r\n        flex: 1;\r\n        text-overflow: ellipsis;\r\n        overflow: hidden;\r\n\r\n        font-size: 12px;\r\n    }\r\n\r\n    .Message-Content {\r\n        margin: 5px 0 10px 20px;\r\n        \r\n        word-break: break-all;\r\n        white-space: normal;\r\n    }\r\n`;\r\n\r\nexport default MessagesBox;","import React, { useEffect, useState, useRef } from 'react';\r\nimport MessagesBox from 'styles/chat/MessagesBox';\r\nimport { db } from 'config/firebase';\r\n\r\ntype MessagesPropType = {\r\n    id: string,\r\n    users: any,\r\n}\r\n\r\nconst Messages: React.FC<MessagesPropType> = ({ id, users }) => {\r\n    const chatRef = db.collection('Chat').doc(id).collection('Messages');\r\n    const [chats, setChats] = useState<Array<any>>([]);\r\n\r\n    useEffect(() => {\r\n        chatRef.orderBy('timeStamp', 'desc').onSnapshot((snapshot) => {\r\n            const data = snapshot.docs.map((snapshot_message) => {\r\n                return snapshot_message.data();\r\n            });\r\n            setChats(data);\r\n        }, (error) => console.error(error));\r\n    }, [id]);\r\n\r\n    return (\r\n        <MessagesBox>\r\n            {users && chats.map((message, index) => {\r\n                if (users[message.from]) {\r\n                    const { name, profileImage } = users[message.from];\r\n                    return (\r\n                        <li className=\"Message-Wrapper\" key={index}>\r\n                            <section className=\"Message-User\">\r\n                                <img className=\"Message-User-Image\" src={profileImage} alt=\"Profile_Image\"/>\r\n                                <p className=\"Message-User-Name\">{name}</p>\r\n                            </section>\r\n                            <p className=\"Message-Content\">\r\n                                {message.content}\r\n                            </p>\r\n                        </li>\r\n                    );\r\n                }\r\n            })}\r\n        </MessagesBox>\r\n    );\r\n}\r\n\r\nexport default Messages;","import styled from 'styled-components';\r\n\r\nconst MessageInputBox = styled.div`\r\n    min-height: 25px;\r\n    margin-top: 10px;\r\n\r\n    display: flex;\r\n    justify-content: flex-end;\r\n\r\n    .MessageInput-Input {\r\n        min-height: 25px;\r\n        height: 25px;\r\n\r\n        resize: none;\r\n        flex: 1;\r\n        border: 1px solid rgba(102, 187, 106, 0.9);\r\n        border-radius: 5px;\r\n        overflow: hidden;\r\n    }\r\n\r\n    .MessageInput-Button {\r\n        width: 40px;\r\n        height: 100%;\r\n\r\n        color: #ffffff;\r\n        background-color: rgba(102, 187, 106, 0.9);\r\n        border-radius: 5px;\r\n    }\r\n`;\r\n\r\nexport default MessageInputBox;","import React, { useRef, useState } from 'react';\r\nimport MessageInputBox from 'styles/chat/MessageInputBox';\r\nimport { db } from 'config/firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\n\r\ntype MessageInputPropType = {\r\n    id: string\r\n}\r\n\r\nconst MessageInput: React.FC<MessageInputPropType> = ({ id }) => {\r\n    const { uid } = useSelector((state: RootState) => state.user);\r\n    const [inputString, setInputString] = useState<string>('');\r\n\r\n    const chatMessageRef = db.collection('Chat').doc(id).collection('Messages');\r\n\r\n    // Auto TextArea Height\r\n    const textArea = useRef<HTMLTextAreaElement>(null);\r\n    const resize = () => {\r\n        const element = textArea.current;\r\n        if( element ) {\r\n            element.style.height = '5px';\r\n            element.style.height = (element.scrollHeight + 2).toString() + 'px';\r\n        }\r\n    }\r\n\r\n    // Sending Message\r\n    const onClickSend = () => {\r\n        if (inputString) {\r\n            setInputString('');\r\n            chatMessageRef.add({\r\n                content: inputString,\r\n                from: uid,\r\n                timeStamp: new Date().getTime(),\r\n            })\r\n            .then(() => {\r\n                // Set After Message\r\n                // console.log(ref);\r\n                console.log(\"Sending Message Complete\");\r\n            });\r\n        }\r\n    }\r\n\r\n    // Press Enter without Shift\r\n    const pressedEnter = (event: any) => {\r\n        if(event.keyCode == 13 && event.shiftKey == false) {\r\n            event.preventDefault();\r\n            onClickSend();\r\n        }\r\n        resize();\r\n    }\r\n\r\n    return (\r\n        <MessageInputBox>\r\n            <textarea\r\n                ref={textArea}\r\n                className=\"Delete-Input MessageInput-Input\"\r\n                onKeyUp={resize}\r\n                onKeyDown={pressedEnter}\r\n                onChange={(event) => setInputString(event.target.value)}\r\n                value={inputString}\r\n                />\r\n            <button\r\n                className=\"Delete-Button MessageInput-Button\"\r\n                onClick={onClickSend}\r\n                >\r\n                ⤶\r\n            </button>\r\n        </MessageInputBox>\r\n    );\r\n}\r\n\r\nexport default MessageInput;","import styled from 'styled-components';\r\n\r\nexport const UserAddModal = styled.div`\r\n    width: 320px;\r\n    padding: 10px;\r\n    margin-top: -100px;\r\n    margin-left: -10px;\r\n    position: absolute;\r\n    z-index: 1;\r\n    background-color: #e0e3e9;\r\n    border-radius: 10px;\r\n\r\n    display: flex;\r\n    flex-direction: column;\r\n\r\n    .UserAddModal-Title {\r\n        margin: 0 0 15px 0;\r\n        color: rgba(17,45,88,0.9);\r\n    }\r\n\r\n    .UserAddModal-Section {\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: flex-end;\r\n        align-items: center;\r\n    }\r\n\r\n    .UserAddModal-Input {\r\n        width: 100%;\r\n        height: 30px;\r\n        margin-left: 10px;\r\n        padding-left: 10px;\r\n        flex: 1;\r\n        background-color: #ffffff;\r\n        border-radius: 5px;\r\n    }\r\n    .UserAddModal-Button {\r\n        width: 50px;\r\n        height: 30px;\r\n\r\n        background-color: rgba(102,187,106,0.9);\r\n        color: white;\r\n        border-radius: 5px;\r\n    }\r\n`;\r\n\r\nconst RoomButtonBox = styled.div`\r\n    width: 100%;\r\n    min-height: 50px;\r\n    margin: 10px 0 0 0;\r\n    padding: 7.5px 10px;\r\n\r\n    display: flex;\r\n    justify-content: space-between;\r\n\r\n    background-color: #ffffff;\r\n    border-radius: 10px;\r\n\r\n    .RoomButton-Button {\r\n        width: 48%;\r\n        height: 35px;\r\n        color: #ffffff;\r\n        font-weight: bold;\r\n        border-radius: 10px;\r\n    }\r\n\r\n    .RoomButton-Red {\r\n        background-color: rgba(254, 77, 77, 0.9)\r\n    }\r\n    .RoomButton-Green {\r\n        background-color: rgba(102, 187, 106, 0.9)\r\n    }\r\n`;\r\n\r\nexport default RoomButtonBox;","import React, { useEffect, useState } from 'react';\r\nimport RoomButtonBox, { UserAddModal } from 'styles/chat/RoomButtonBox';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { db } from 'config/firebase';\r\n\r\ntype RoomButtonPropType = {\r\n    id: string,\r\n\r\n}\r\n\r\nconst RoomButton: React.FC<RoomButtonPropType> = ({ id }) => {\r\n    const history = useHistory();\r\n    const [userNameInput, setUserNameInput] = useState<string>('');\r\n    const [displayModal, setDisplayModal] = useState<boolean>(false);\r\n\r\n    const userRef = db.collection('User');\r\n    const chatUserRef = db.collection('Chat').doc(id).collection('Users');\r\n    const userRoomRef = db.collection('UserRooms')\r\n\r\n    const onClickAddUser = () => {\r\n        if (userNameInput) {\r\n            const emailCheck = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(userNameInput);\r\n            if (emailCheck) {\r\n                userRef.where(\"email\", \"==\", userNameInput).get().then((snapShot) => {\r\n                    if(snapShot.docs.length !== 0){\r\n                        snapShot.docs.forEach((userSnap) => {\r\n                            const user = userSnap.data();\r\n                            console.log(userSnap.id);\r\n                            if (user.email) {\r\n                                chatUserRef.doc(userSnap.id).set({ state: false }).then(() => {\r\n                                    userRoomRef.doc(userSnap.id).collection('Rooms').doc(id).set({ state: true }).then(() => {\r\n                                        alert('추가하였습니다!');\r\n                                        setDisplayModal(false);\r\n                                    });\r\n                                });\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        alert(\"이메일을 찾지 못하였습니다!\");\r\n                    }\r\n                })\r\n                .catch(() => alert(\"에러가 발생했습니다!\\n다시 시도해주세요.\"));\r\n            }\r\n            else {\r\n                alert('제대로 된 이메일을 입력하세요!');\r\n            }\r\n        }\r\n    }\r\n\r\n    const onClickModal = () => {\r\n        setDisplayModal((prev) => !prev);\r\n    }\r\n\r\n    const onClickExit = () => {\r\n        history.push('/');\r\n    }\r\n\r\n    return (\r\n        <RoomButtonBox>\r\n            {displayModal\r\n            ?<UserAddModal>\r\n                <p className=\"UserAddModal-Title\">\r\n                    초대할 유저의 이메일을 입력하세요.\r\n                </p>\r\n                <section className=\"UserAddModal-Section\">\r\n                    <input className=\"Delete-Input UserAddModal-Input\"\r\n                        onChange={(event) => setUserNameInput(event.target.value)}\r\n                        />\r\n                    <button className=\"Delete-Button UserAddModal-Button\"\r\n                        onClick={onClickAddUser}\r\n                        >\r\n                        초대\r\n                    </button>\r\n                </section>\r\n            </UserAddModal>\r\n            :<></>}\r\n            <button className=\"Delete-Button RoomButton-Button RoomButton-Green\"\r\n                onClick={onClickModal}\r\n                >\r\n                초대하기\r\n            </button>\r\n            <button className=\"Delete-Button RoomButton-Button RoomButton-Red\"\r\n                onClick={onClickExit}\r\n                >\r\n                나가기\r\n            </button>\r\n        </RoomButtonBox>\r\n    );\r\n}\r\n\r\nexport default RoomButton;","import React from 'react';\r\nimport ChatBox from 'styles/chat/ChatBox';\r\nimport ChatUsers from 'components/chat/ChatUsers';\r\nimport Messages from 'components/chat/Messages';\r\nimport MessageInput from 'components/chat/MessageInput';\r\nimport RoomButton from 'components/chat/RoomButton';\r\n\r\ntype ChatPropType = {\r\n    id: string,\r\n    users: any,\r\n}\r\n\r\nconst Chat: React.FC<ChatPropType> = ({ id, users }) => {\r\n    return (\r\n        <ChatBox>\r\n            <ChatUsers\r\n                id={id}\r\n                users={users}\r\n                />\r\n            <section className=\"Chat-Message-Wrapper\">\r\n                <Messages\r\n                    id={id}\r\n                    users={users}\r\n                    />\r\n                <MessageInput\r\n                    id={id}\r\n                    />\r\n            </section>\r\n            <RoomButton\r\n                id={id}\r\n                />\r\n        </ChatBox>\r\n    );\r\n}\r\n\r\nexport default Chat;","import styled from 'styled-components';\r\n\r\nconst AgoraBox = styled.div`\r\n    flex: 1;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: flex-end;\r\n    align-items: center;\r\n\r\n    .Agora-Videos {\r\n        width: 100%;\r\n        height: 100%;\r\n        max-height: 100vh;\r\n        margin: 0;\r\n        padding: 10px;\r\n\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-wrap: wrap;\r\n\r\n        list-style: none;\r\n        background-color: #333333;\r\n    }\r\n\r\n    .Agora-Stream{\r\n        width: 100%;\r\n        height: 100%;\r\n        flex-grow: 1;\r\n        flex-basis: 30%;\r\n        max-width: 50%;\r\n        margin: 5px;\r\n        background-color: black;\r\n        border-radius: 5px;\r\n        overflow: hidden;\r\n\r\n        .Agora-Player-Image-Wrapper {\r\n            width: 100%;\r\n            height: 100%;\r\n\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            .Agora-Player-Image {\r\n                width: 75px;\r\n                height: 75px;\r\n                border-radius: 50%;\r\n            }\r\n        }\r\n\r\n        .Agora-Player-Name {\r\n            z-index: 5;\r\n            width: 100px;\r\n            height: 25px;\r\n            padding: 5px 0 0 5px;\r\n            margin: 0;\r\n            position: absolute;\r\n            color: white;\r\n            overflow: hidden;\r\n            text-overflow: ellipsis;\r\n            background: rgba(0, 0, 0, 0.5);\r\n            border-radius: 3px;\r\n        }\r\n\r\n        div{\r\n            width: 100%;\r\n            height: 100%;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            video{\r\n                // 비디오 크기가 비율에 맞게 정사각형 안에 들어가도록 함\r\n                position: relative !important;\r\n                object-fit: contain !important;\r\n            }\r\n        }\r\n    }\r\n\r\n    .Agora-Controller {\r\n        width: 100%;\r\n        height: 50px;\r\n        background-color: rgba(133, 133, 133);\r\n\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    }\r\n\r\n    .Agora-Button {\r\n        width: 50px;\r\n        height: 30px;\r\n\r\n        :last-child {\r\n            margin-left: 30px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport default AgoraBox;","import React, { useState, useEffect } from 'react';\r\nimport AgoraBox from 'styles/agora/AgoraBox';\r\nimport AgoraRTC, { ILocalTrack, UID, IAgoraRTCRemoteUser } from \"agora-rtc-sdk-ng\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\nimport { camera, noCamera, audio, noAudio } from 'components/agora/Icons';\r\n\r\nlet client = AgoraRTC.createClient({\r\n    mode: \"rtc\",\r\n    codec: \"h264\"\r\n});\r\n\r\ntype LocalTrackType = {\r\n    [key: string]: ILocalTrack | undefined,\r\n    videoTrack ?: ILocalTrack\r\n    audioTrack ?: ILocalTrack\r\n}\r\nlet localTracks: LocalTrackType = {\r\n    videoTrack: undefined,\r\n    audioTrack: undefined,\r\n};\r\n\r\ntype OptionType = {\r\n    appId: string,\r\n    token: | null,\r\n    uid: UID | null,\r\n}\r\nexport const options: OptionType = {\r\n    appId: process.env.REACT_APP_AGORA_appId || '',\r\n    token: null,\r\n    uid: null,\r\n};\r\n\r\ntype AgoraPropType = {\r\n    roomId : string,\r\n    users: any,\r\n}\r\n\r\nconst Agora: React.FC<AgoraPropType> = ({ roomId, users }) => {\r\n    const my_uid = useSelector((state: RootState) => state.user.uid);\r\n    // 내가 Join 했는지 에 대한 State...\r\n    // 후에 Loading... 등 가능할 듯 하다\r\n    const [joined, setJoined] = useState<boolean>(false);\r\n    \r\n    // 비디오 On 여부\r\n    const [myVideo, setMyVideo] = useState<boolean>(false);\r\n    // 오디오 On 여부\r\n    const [myAudio, setMyAudio] = useState<boolean>(false);\r\n\r\n    // 참가하고 있는 UID 들\r\n    const [publishedUids, setPublishedUids] = useState<Array<any>>([]);\r\n    // 삭제할 UID 를 State로 관리할 것이다.\r\n    const [unpublishedUid, setUnpublishedUid] = useState<any>(undefined);\r\n\r\n    useEffect(() => {\r\n        joinChannel();\r\n        window.addEventListener('unload', leaveChannel)\r\n        return () => {\r\n            leaveChannel();\r\n            window.removeEventListener('unload', leaveChannel)\r\n        }\r\n    }, [])\r\n\r\n    // 채널 참여\r\n    const joinChannel = async (/*event*/) => {\r\n        try {\r\n            if (!roomId) {\r\n                return console.log(\"Please Enter Correct Channel\");\r\n            }\r\n            setJoined(true);\r\n\r\n            // Listening 상대방 입장/퇴장\r\n            client.on(\"user-published\", userPublished);\r\n            client.on(\"user-unpublished\", userUnpublished);\r\n\r\n            //여기서, 엑티브 스피커를..?\r\n            // client.enableAudioVolumeIndicator();\r\n            // client.on(\"volume-indicator\", volumes => {\r\n            //   volumes.forEach((volume, index) => {\r\n            //     console.log(`${index} UID ${volume.uid} Level ${volume.level}`);\r\n            //   });\r\n            // })\r\n\r\n            options.uid = await client.join(options.appId, roomId, options.token || null, my_uid);\r\n            \r\n            const hasAudio = await AgoraRTC.getMicrophones(true);\r\n            const hasVideo = await AgoraRTC.getCameras(true);\r\n            if (hasAudio.length !== 0){\r\n                localTracks.audioTrack = await AgoraRTC.createMicrophoneAudioTrack();\r\n            }\r\n            if (hasVideo.length !== 0){\r\n                localTracks.videoTrack = await AgoraRTC.createCameraVideoTrack();\r\n            }\r\n\r\n            const clientArray = [];\r\n            if (localTracks.audioTrack){\r\n                clientArray.push(localTracks.audioTrack);\r\n                setMyAudio(true);\r\n            }\r\n            if (localTracks.videoTrack){ \r\n                localTracks.videoTrack.play(\"Agora-Local-Player\");\r\n                clientArray.push(localTracks.videoTrack);\r\n                setMyVideo(true);\r\n            }\r\n\r\n            await client.publish(clientArray);\r\n        }\r\n        catch(error){\r\n            console.error(error)\r\n            setJoined(false);\r\n        }\r\n    }\r\n    // 채널 퇴장... Unmount & Leave... else\r\n    const leaveChannel = async (/*event*/) => {\r\n        Object.keys(localTracks).forEach(trackName => {\r\n            const track = localTracks[trackName];\r\n            if(track) {\r\n                track.stop();\r\n                track.close();\r\n                localTracks[trackName] = undefined;\r\n            }\r\n        })\r\n        await client.unpublish();\r\n        await client.leave();    \r\n        setJoined(false);\r\n    }\r\n\r\n    // To My subscribers, I Have to Control Video & Audio\r\n    useEffect(() => {\r\n        try{\r\n            const { videoTrack, audioTrack } = localTracks;\r\n            if (videoTrack) {\r\n                videoTrack.setEnabled(myVideo);\r\n                console.log(videoTrack.isPlaying);\r\n            }\r\n            if (audioTrack) {\r\n                audioTrack.setEnabled(myAudio);\r\n            }\r\n        }\r\n        catch(error){\r\n            console.error(error)\r\n        }\r\n    }, [myVideo, myAudio])\r\n\r\n    // 유저 입장\r\n    const userPublished = (user: any, mediaType: any) => {\r\n        if(!publishedUids.filter((publishedUser) => publishedUser.uid == user.uid).length){\r\n            setPublishedUids([...publishedUids, user]);\r\n        }\r\n        userSubscribe(user, mediaType);\r\n    }\r\n    // 유저 퇴장 -> State 에 저장 -> State 변경 감지 및 삭제\r\n    const userUnpublished = (user: any) => {\r\n        setUnpublishedUid(user);\r\n    }\r\n    useEffect(() => {\r\n        if (unpublishedUid){\r\n            userUnsubscribe(unpublishedUid);\r\n        }\r\n    }, [unpublishedUid])\r\n\r\n    // 유저의 Subscribe\r\n    const userSubscribe = async (user: IAgoraRTCRemoteUser, mediaType: \"audio\" | \"video\") => {\r\n        await client.subscribe(user, mediaType);\r\n        if (mediaType === 'video' && user.hasVideo) {\r\n            (user.videoTrack as any).play(`Agora-Player-${user.uid}`);\r\n        } \r\n        if (mediaType === 'audio' && user.hasAudio) {\r\n            (user.audioTrack as any).play();\r\n        }\r\n    }\r\n\r\n    // 유저의 Unsubscribe\r\n    const userUnsubscribe = async (user: any) => {\r\n        const index = publishedUids.findIndex((publishedUser) => publishedUser.uid === user.uid);\r\n        if(index !== -1){\r\n            setPublishedUids(prev => [...prev].splice(index, 1));\r\n        }\r\n    }\r\n\r\n    // 비디오 Off 일 때 Image를 출력\r\n    // const displayImage = (uid: string) => {\r\n    //     let profileImage = 'Profile.png';\r\n    //     if (users[uid] && users[uid].profileImage) {\r\n    //         profileImage = users[uid].profileImage;\r\n    //     }\r\n    //     return (\r\n    //         <div className=\"Agora-Player-Image-Wrapper\">\r\n    //             <img className=\"Agora-Player-Image\" src={profileImage} alt=\"Image\"/>\r\n    //         </div>\r\n    //     );\r\n    // }\r\n    // UID 에 대한 이름을 출력\r\n    const displayName = (uid: any) => {\r\n        let name = 'undefined';\r\n        if (users[uid] && users[uid].name){\r\n            name = users[uid].name;\r\n        }\r\n        return (\r\n            <p className=\"Agora-Player-Name\">{name}</p>\r\n        );\r\n    }\r\n    \r\n    return (\r\n        <AgoraBox>\r\n            <ul className=\"Agora-Videos\">\r\n            {joined\r\n            ?<>\r\n                <li id=\"Agora-Local-Player\" className=\"Agora-Stream\">\r\n                    {displayName(my_uid)}\r\n                </li>\r\n                {\r\n                publishedUids.map(users => {\r\n                    const uid = users.uid;\r\n                    return (\r\n                        <li id={`Agora-Player-${uid}`} className=\"Agora-Stream\">\r\n                            {displayName(uid as string)}\r\n                        </li>\r\n                    );\r\n                })\r\n                }</>\r\n            : null}\r\n            </ul>\r\n            <section className=\"Agora-Controller\">\r\n                <button\r\n                    className=\"Delete-Button Agora-Button\"\r\n                    onClick={() => {\r\n                        if (localTracks.videoTrack){\r\n                            setMyVideo(prev => !prev);\r\n                        }\r\n                    }}\r\n                    >\r\n                    {myVideo ? camera() : noCamera()}\r\n                </button>\r\n                <button\r\n                    className=\"Delete-Button Agora-Button\"\r\n                    onClick={() => {\r\n                        if (localTracks.audioTrack){\r\n                            setMyAudio(prev => !prev);\r\n                        }\r\n                    }}\r\n                    >\r\n                    {myAudio ? audio() : noAudio() }\r\n                </button>\r\n            </section>\r\n        </AgoraBox>\r\n    );\r\n}\r\n\r\nexport default Agora;","export const camera = () => {\r\n    return (\r\n        <svg viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" width=\"30px\" height=\"30px\">\r\n            <path d=\"M 4 6 C 2.9 6 2 6.9 2 8 L 2 16 C 2 17.1 2.9 18 4 18 L 15 18 C 16.1 18 17 17.1 17 16 L 17 8 C 17 6.9 16.1 6 15 6 L 4 6 z M 22 7 L 18 10 L 18 14 L 22 17 L 22 7 z\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport const noCamera = () => {\r\n    return (\r\n        <svg viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" width=\"30px\" height=\"30px\">\r\n            <path d=\"M 3.40625 2 L 2 3.40625 L 4.59375 6 L 4 6 C 2.895 6 2 6.895 2 8 L 2 16 C 2 17.105 2.895 18 4 18 L 15 18 C 15.446417 18 15.855274 17.841046 16.1875 17.59375 L 20.59375 22 L 22 20.59375 L 3.40625 2 z M 10 6 L 17 13 L 17 8 C 17 6.895 16.105 6 15 6 L 10 6 z M 22 7 L 18 10 L 18 14 L 22 18 L 22 7 z\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport const audio = () => {\r\n    return (\r\n        <svg viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" width=\"30px\" height=\"30px\">\r\n            <path d=\"M 12 2 C 10.3 2 9 3.3 9 5 L 9 12 C 9 13.7 10.3 15 12 15 C 13.7 15 15 13.7 15 12 L 15 5 C 15 3.3 13.7 2 12 2 z M 5 12 C 5 15.506094 7.6225843 18.416102 11 18.90625 L 11 22 L 13 22 L 13 18.90625 C 16.377416 18.416102 19 15.506094 19 12 L 17 12 C 17 14.754545 14.754545 17 12 17 C 9.2454545 17 7 14.754545 7 12 L 5 12 z\" overflow=\"visible\" enable-background=\"accumulate\" font-family=\"Bitstream Vera Sans\"/>\r\n        </svg>\r\n    );\r\n}\r\n\r\nexport const noAudio = () => {\r\n    return (\r\n        <svg viewBox=\"0 0 24 24\" enable-background=\"new 0 0 24 24\" width=\"30px\" height=\"30px\">\r\n            <path d=\"M 12 2 C 10.4 2 9.1 3.3125 9 4.8125 L 15 10.8125 L 15 5 C 15 3.3 13.7 2 12 2 z M 3.4375 2.03125 L 2.03125 3.4375 L 9 10.40625 L 9 12 C 9 13.7 10.3 15 12 15 C 12.465 15 12.893768 14.874445 13.28125 14.6875 L 14.71875 16.125 C 13.932714 16.657737 13.01236 17 12 17 C 9.2 17 7 14.8 7 12 L 5 12 C 5 15.5 7.6 18.40625 11 18.90625 L 11 22 L 13 22 L 13 18.90625 C 14.1875 18.71875 15.251953 18.254883 16.15625 17.59375 L 20.5625 21.96875 L 21.96875 20.5625 L 14.6875 13.3125 L 9 7.59375 L 3.4375 2.03125 z M 17 12 C 17 12.3 17.00625 12.4875 16.90625 12.6875 L 18.59375 14.40625 C 18.89375 13.70625 19 12.9 19 12 L 17 12 z\"/>\r\n        </svg>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport RoomBox from 'styles/chat/RoomBox';\r\nimport Chat from 'components/chat/Chat';\r\nimport Agora from 'components/agora/Agora';\r\nimport { db, firebaseApp } from 'config/firebase';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\n\r\nconst isOfflineForFirestore = {\r\n    state: false,\r\n};\r\n\r\nconst isOnlineForFirestore = {\r\n    state: true,\r\n}\r\n\r\n\r\nconst Room: React.FC = ({ match }: any) => {\r\n    const { uid } = useSelector((state: RootState) => state.user);\r\n    const { id } = match.params;\r\n    const [ users, setUsers ] = useState<Object>({});\r\n\r\n    // Using for get Users\r\n    const chatUserRef = db.collection('Chat').doc(id).collection('Users');\r\n    const userRef = db.collection('User');\r\n\r\n    // Using for Onlines\r\n    const userStatusFirestoreRef = db.collection('Chat').doc(id).collection('Users').doc(uid);\r\n    const userStatusDatabaseRef = firebaseApp.database().ref('/status/' + uid);\r\n\r\n    useEffect(() => {\r\n        const leaveEvent = () => {\r\n            userStatusDatabaseRef.set(isOfflineForFirestore);\r\n            userStatusFirestoreRef.set(isOfflineForFirestore);\r\n        }\r\n        window.addEventListener('unload', leaveEvent)\r\n        // IF Unmount, disconnect\r\n        return () => {\r\n            leaveEvent();\r\n            window.removeEventListener('unload', leaveEvent);\r\n        }\r\n    }, []);\r\n    useEffect(() => {\r\n        // Setting User Connection\r\n        // ref('.info/connected') 에서는 연결됐다면 true, 안됐다면 false를 반환할 것이다.\r\n        firebaseApp.database().ref('.info/connected').on('value', (snapshot) => {\r\n            console.log('Database Connected : ', snapshot.val())\r\n            if (snapshot.val() == false) {\r\n                // Instead of simply returning, we'll also set Firestore's state\r\n                // to 'offline'. This ensures that our Firestore cache is aware\r\n                // of the switch to 'offline.'\r\n                userStatusFirestoreRef.set(isOfflineForFirestore);\r\n                return;\r\n            }\r\n            // Database의 onDisconnect 기능을 사용하기 위해 사용자의 status를 저장\r\n            userStatusDatabaseRef.onDisconnect().set(isOfflineForFirestore)\r\n            .then(() => {\r\n                // onDisconnect 될 때 까지 일단 Database에 state 를 online으로 설정\r\n                userStatusDatabaseRef.set(isOnlineForFirestore);\r\n                userStatusFirestoreRef.set(isOnlineForFirestore);\r\n            });\r\n        });\r\n\r\n        // User Plus & Added Snapshot\r\n        chatUserRef.onSnapshot((snapshot) => {\r\n            // Get All User IDs\r\n            const usersId = snapshot.docs.map((user) => user.id);\r\n            let userData = {} as any;\r\n            // Get User Informations\r\n            usersId.forEach((userId) => {\r\n                userRef.doc(userId).onSnapshot((snapshot_user) => {\r\n                    userData = {\r\n                        ...userData,\r\n                        [userId]: snapshot_user.data(),\r\n                    };\r\n                    setUsers(userData);\r\n                })\r\n            });\r\n        });\r\n    }, [id]);\r\n\r\n    return (\r\n        <RoomBox>\r\n            <Agora\r\n                roomId={id}\r\n                users={users}\r\n                />\r\n            <Chat\r\n                id={id}\r\n                users={users}\r\n                />\r\n        </RoomBox>\r\n    );\r\n};\r\n\r\nexport default Room;","import styled from 'styled-components';\r\n\r\nexport const LoginWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst LoginBox = styled.div`\r\n    width: 500px;\r\n    padding: 30px 60px;\r\n    box-shadow: 0 0 45px rgba(102, 187, 106, 0.15);\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n\r\n    .Login-Logo {\r\n        width: 100%;\r\n        margin: 40px 0 65px 0;\r\n        font-family: 'Dancing Script', cursive;\r\n\r\n        // 드래그 못하게\r\n        -ms-user-select: none; \r\n        -moz-user-select: -moz-none;\r\n        -khtml-user-select: none;\r\n        -webkit-user-select: none;\r\n        user-select: none;\r\n\r\n        text-align: center;\r\n        font-size: 50px;\r\n        color: #0BAC56;\r\n    }\r\n\r\n    .Login-Inputs {\r\n        width: 380px;\r\n        margin-bottom: 20px;\r\n        border: 1px solid #112d58;\r\n\r\n        hr {\r\n            margin: 0;\r\n            border: none;\r\n            border-bottom: 1px solid #112d58;\r\n        }\r\n    }\r\n\r\n    .Login-Error{\r\n        width: 100%;\r\n        padding: 0;\r\n        margin: 0;\r\n        margin-bottom: 20px;\r\n\r\n        text-align: center;\r\n        color: red;\r\n    }\r\n\r\n    .Login-Button {\r\n        width: 380px;\r\n        height: 50px;\r\n        padding: 0;\r\n        margin-bottom: 20px;\r\n\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        line-height: 1.5;\r\n        border-radius: .5rem;\r\n        border-color: rgba(102, 187, 106, 0.9);\r\n        color: #fff;\r\n        background-color: rgba(102, 187, 106, 0.9);\r\n    }\r\n\r\n    .Login-Input {\r\n        width: 100%;\r\n        height: 50px;\r\n        padding: 0 10px;\r\n\r\n        font-size: 16px;\r\n        color: rgba(17, 45, 88, 0.9);\r\n\r\n        :focus {\r\n            border: 1px solid #112d58;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n\r\n    .Login-SubClick{\r\n        width: 100%;\r\n        display: flex;\r\n        justify-content: flex-end;\r\n\r\n        a {\r\n            color: #939393;\r\n            text-decoration:none;\r\n\r\n            :focus {\r\n                color: #777d92;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport default LoginBox;","import React, { useState, useEffect } from 'react';\r\nimport LoginBox, { LoginWrapper } from 'styles/auth/LoginBox';\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\nimport { LogIn_User_Request } from 'reducers/user';\r\n\r\nconst Login: React.FC = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n\r\n    const dispatch = useDispatch();\r\n    const { loadUserErrorReason } = useSelector((state: RootState) => state.user)\r\n\r\n    const onChangeInput = (\r\n        setState: React.Dispatch<React.SetStateAction<string>>\r\n    ) => (event: any) => {\r\n        const {value} = event.target;\r\n        setState(value);\r\n    };\r\n\r\n    const onClickLogin = () => {\r\n        const emailCheck = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(email);\r\n        const pwCheck = /^(?=.*[a-zA-Z0-9])((?=.*\\d)|(?=.*\\W)).{6,20}$/.test(password);\r\n\r\n        if (!emailCheck || !pwCheck) {\r\n            console.log(\"제대로 입력\")\r\n        }\r\n        else {\r\n            dispatch(LogIn_User_Request({\r\n                email,\r\n                password,\r\n            }));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <LoginWrapper>\r\n        <LoginBox>\r\n            <div className=\"Login-Logo\">WebRTC</div>\r\n            <section className=\"Login-Inputs\">\r\n                <input\r\n                    className=\"Delete-Input Login-Input\"\r\n                    placeholder=\"이메일을 입력하세요\"\r\n                    onChange={onChangeInput(setEmail)}\r\n                    value={email}\r\n                    />\r\n                <hr/>\r\n                <input\r\n                    className=\"Delete-Input Login-Input\"\r\n                    placeholder=\"비밀번호를 입력하세요\"\r\n                    onChange={onChangeInput(setPassword)}\r\n                    value={password}\r\n                    type=\"password\"\r\n                    />\r\n            </section>\r\n            <p className=\"Login-Error\">{loadUserErrorReason}</p>\r\n            <button\r\n                className=\"Delete-Button Login-Button\"\r\n                onClick={onClickLogin}\r\n                >\r\n                로그인\r\n            </button>\r\n            <section className=\"Login-SubClick\">\r\n                <Link to=\"/signup\">\r\n                    회원가입\r\n                </Link>\r\n            </section>\r\n        </LoginBox>\r\n        </LoginWrapper>\r\n    );\r\n}\r\n\r\nexport default Login;","import styled from 'styled-components';\r\n\r\nexport const SignUpWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\n\r\nconst SignUpBox = styled.div`\r\n    width: 500px;\r\n    padding: 30px 60px;\r\n    box-shadow: 0 0 45px rgba(102, 187, 106, 0.15);\r\n\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n\r\n    .SignUp-Section {\r\n        width: 380px;\r\n        margin-bottom: 20px;\r\n\r\n        strong {\r\n            width: 100%;\r\n            color: #112d58;\r\n        }\r\n\r\n        p {\r\n            width: 100%;\r\n            height: 17px;\r\n            padding: 0;\r\n            margin: 5px 0 0 0;\r\n            color: red;\r\n            font-size: 13px;\r\n        }\r\n    }\r\n\r\n    .SignUp-Profile-Section {\r\n        width: 380px;\r\n        margin: 15px 0;\r\n        \r\n        .SignUp-Profile-Title {\r\n            font-weight: bold;\r\n            color: #112d58;\r\n        }\r\n\r\n        .SignUp-Profile-Wrapper{\r\n            width: 100%;\r\n            padding: 10px;\r\n\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n        }\r\n    }\r\n\r\n    .SignUp-Image{\r\n        width: 100px;\r\n        height: 100px;\r\n        margin-right: 10px;\r\n\r\n        border: 1px solid #939393;\r\n        border-radius: 50px;\r\n    }\r\n\r\n    .SignUp-Input {\r\n        width: 100%;\r\n        height: 50px;\r\n        padding: 0 10px;\r\n        margin-top: 5px;\r\n\r\n        font-size: 16px;\r\n        color: rgba(17, 45, 88, 0.9);\r\n        border: 1px solid #112d58;\r\n\r\n        :focus {\r\n            border: 2px solid #112d58;\r\n            border-radius: 5px;\r\n        }\r\n    }\r\n\r\n    .SignUp-Button {\r\n        width: 380px;\r\n        height: 50px;\r\n        padding: 0;\r\n        margin: 20px 0;\r\n\r\n        font-size: 16px;\r\n        font-weight: 500;\r\n        line-height: 1.5;\r\n        border-radius: .5rem;\r\n        border-color: rgba(102, 187, 106, 0.9);\r\n        color: #fff;\r\n        background-color: rgba(102, 187, 106, 0.9);\r\n    }\r\n`;\r\n\r\nexport default SignUpBox;","import React, { useState, useEffect } from 'react';\r\nimport SignUpBox, { SignUpWrapper } from 'styles/auth/SignUpBox';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\nimport { SignUp_User_Request } from 'reducers/user';\r\n\r\nconst SignUp: React.FC = () => {\r\n    const [name, setName] = useState<string>('');\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [checkPassword, setCheckPassword] = useState<string>('');\r\n    const [img, setImg] = useState<File>();\r\n\r\n    const [nameCorrect, setNameCorrect] = useState<boolean>(true);\r\n    const [emailCorrect, setEmailCorrect] = useState<boolean>(true);\r\n    const [pwCorrect, setPwCorrect] = useState<boolean>(true);\r\n    const [pwCheckCorrect, setPwCheckCorrect] = useState<boolean>(true);\r\n\r\n    const dispatch = useDispatch();\r\n    const { uid } = useSelector((state: RootState) => state.user);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (uid) {\r\n            history.push('/');\r\n        }\r\n    }, [uid])\r\n\r\n    const onChangeInput = (\r\n        setState: React.Dispatch<React.SetStateAction<string>>\r\n    ) => (event: any) => {\r\n        setState(event.target.value);\r\n    };\r\n\r\n    const onChangeUpload = (event: any) => {\r\n        if (event.target.files) {\r\n            setImg(event.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const onClickSignUp = () => {\r\n        const nameCheck = name !== '';\r\n        const emailCheck = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*.[a-zA-Z]{2,3}$/i.test(email);\r\n        const pwCheck = /^(?=.*[a-zA-Z0-9])((?=.*\\d)|(?=.*\\W)).{6,20}$/.test(password);\r\n        const isPwDiff = password === checkPassword && checkPassword !== '';\r\n\r\n        if (!nameCheck || !emailCheck || !pwCheck || !isPwDiff) {\r\n            setNameCorrect(nameCheck);\r\n            setEmailCorrect(emailCheck);\r\n            setPwCorrect(pwCheck);\r\n            setPwCheckCorrect(isPwDiff);\r\n        }\r\n        else {\r\n            dispatch(SignUp_User_Request({\r\n                name,\r\n                email,\r\n                password,\r\n                image: img\r\n            }))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <SignUpWrapper>\r\n        <SignUpBox>\r\n            <section className=\"SignUp-Profile-Section\">\r\n                <div className=\"SignUp-Profile-Title\">프로필 사진</div>\r\n                <section className=\"SignUp-Profile-Wrapper\">\r\n                    <img\r\n                        className=\"SignUp-Image\"\r\n                        src={img&&URL.createObjectURL(img) ? URL.createObjectURL(img) : 'Profile.png'}\r\n                        alt=\"Profile\"\r\n                        />\r\n                    <input\r\n                        className=\"SignUp-Input-Image\"\r\n                        type=\"file\"\r\n                        accept=\"image/jpeg, image/jpg, image/png\"\r\n                        onChange={onChangeUpload}\r\n                        />\r\n                </section>\r\n            </section>\r\n            <section className=\"SignUp-Section\">\r\n                <strong>이름</strong>\r\n                <input\r\n                    className=\"Delete-Input SignUp-Input\"\r\n                    placeholder=\"이름을 입력하세요\"\r\n                    onChange={onChangeInput(setName)}\r\n                    value={name}\r\n                    />\r\n                <p>{!nameCorrect && \"이름을 입력해주세요\"}</p>\r\n            </section>\r\n            <section className=\"SignUp-Section\">\r\n                <strong>이메일</strong>\r\n                <input\r\n                    className=\"Delete-Input SignUp-Input\"\r\n                    placeholder=\"이메일을 입력하세요\"\r\n                    onChange={onChangeInput(setEmail)}\r\n                    value={email}\r\n                    />\r\n                <p>{!emailCorrect && \"이메일 형식에 맞게 적어주세요\"}</p>\r\n            </section>\r\n            <section className=\"SignUp-Section\">\r\n                <strong>비밀번호</strong>\r\n                <input\r\n                    className=\"Delete-Input SignUp-Input\"\r\n                    placeholder=\"비밀번호를 입력하세요\"\r\n                    onChange={onChangeInput(setPassword)}\r\n                    value={password}\r\n                    />\r\n                <p>{!pwCorrect && \"비밀번호는 최소 1개의 숫자 혹은 특수 문자를 포함해야 합니다\"}</p>\r\n            </section>\r\n            <section className=\"SignUp-Section\">\r\n                <strong>비밀번호 확인</strong>\r\n                <input\r\n                    className=\"Delete-Input SignUp-Input\"\r\n                    placeholder=\"비밀번호를 다시 입력하세요\"\r\n                    onChange={onChangeInput(setCheckPassword)}\r\n                    value={checkPassword}\r\n                    />\r\n                <p>{!pwCheckCorrect && \"비밀번호를 같게 입력하세요\"}</p>\r\n            </section>\r\n            <button\r\n                className=\"Delete-Button SignUp-Button\"\r\n                onClick={onClickSignUp}\r\n                >\r\n                회원가입 하기\r\n            </button>\r\n        </SignUpBox>\r\n        </SignUpWrapper>\r\n    );\r\n}\r\n\r\nexport default SignUp;","import React, { useEffect } from 'react';\r\nimport AppBox from 'styles/AppBox';\r\nimport 'styles/font.css';\r\nimport { Route } from 'react-router-dom';\r\nimport Main from 'components/main/Main';\r\nimport Room from 'components/chat/Room';\r\nimport Login from 'components/auth/Login';\r\nimport SignUp from 'components/auth/SignUp';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from 'reducers';\r\nimport { Set_User_Success } from 'reducers/user';\r\nimport { firebaseApp } from 'config/firebase';\r\n\r\nconst App: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const { uid } = useSelector((state: RootState) => state.user);\r\n    \r\n    // 로그인 됐는지 확인하는 것... 딜레이가 좀 있다\r\n    useEffect(() => {\r\n        firebaseApp.auth().onAuthStateChanged((user) => {\r\n            if (user && user.uid) {\r\n                dispatch(Set_User_Success({\r\n                    uid: user.uid,\r\n                    name: user.displayName,\r\n                    email: user.email,\r\n                    imageURL: user.photoURL,\r\n                }));\r\n            }\r\n        });\r\n    }, [])\r\n\r\n    return (\r\n        <AppBox>\r\n        {uid\r\n        ?<>\r\n            <Route path=\"/\" component={Main} exact/>\r\n            <Route path=\"/chat/:id\" component={Room}/>\r\n        </>\r\n        : <Route path=\"/\" component={Login} exact/>\r\n        }\r\n        <Route path=\"/signup\" component={SignUp}/>\r\n        </AppBox>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    * {\r\n        box-sizing: border-box;\r\n    }\r\n    head, script{\r\n        display:none;\r\n    }\r\n    body{\r\n        margin: 0;\r\n        font-family: 'Noto Sans KR', sans-serif;\r\n        -webkit-font-smoothing: antialiased;\r\n        -moz-osx-font-smoothing: grayscale;\r\n    }\r\n\r\n    .Delete-Button {\r\n        background: none;\r\n        border: none;\r\n        outline: none;\r\n        cursor: pointer;\r\n    }\r\n\r\n    .Delete-Input {\r\n        background: none;\r\n        border: none;\r\n        outline: none;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;","import { combineReducers } from 'redux';\r\nimport user from 'reducers/user';\r\n// rootReducer Type\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nconst rootReducer = combineReducers({\r\n    user,\r\n});\r\n\r\nexport default rootReducer;","import { call, put, all, fork, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    StateType,\r\n    LOGIN_USER_REQUEST,\r\n    LogIn_User_Request,\r\n    LogIn_User_Success,\r\n    LogIn_User_Failure,\r\n    LOGOUT_USER_REQUEST,\r\n    // LogOut_User_Request,\r\n    SIGNUP_USER_REQUEST,\r\n    SignUp_User_Request,\r\n    SignUp_User_Success,\r\n    SignUp_User_Failure,\r\n} from 'reducers/user';\r\nimport { db, firebaseApp } from 'config/firebase';\r\n\r\n// 로그인\r\nasync function LogInUserAPI({ email, password }: any){\r\n    const { user } = await firebaseApp.auth().signInWithEmailAndPassword(email, password);\r\n    if (user && user.uid){\r\n        return {\r\n            uid: user.uid,\r\n            name: user.displayName,\r\n            email: user.email,\r\n            imageURL: user.photoURL,\r\n        };\r\n    }\r\n    else{\r\n        return {};\r\n    }\r\n}\r\nfunction* LogInUser(action: ReturnType<typeof LogIn_User_Request>) {\r\n    try {\r\n        const result: StateType = yield call(LogInUserAPI, action.payload);\r\n        console.log('Login payload result', result);\r\n        yield put(LogIn_User_Success(result));\r\n    } catch(error) {\r\n        console.error(error);\r\n        yield put(LogIn_User_Failure(error.message));\r\n    }\r\n};\r\nfunction* watchLogInUser() {\r\n    yield takeLatest(LOGIN_USER_REQUEST, LogInUser);\r\n}\r\n\r\n// 로그아웃\r\nfunction* LogOutUser() {\r\n    yield firebaseApp.auth().signOut();\r\n};\r\nfunction* watchLogOutUser() {\r\n    yield takeLatest(LOGOUT_USER_REQUEST, LogOutUser);\r\n}\r\n\r\n// 회원가입 요청 및 저장\r\nasync function signUpUserAPI({ name, email, password, image }: any){\r\n    const { user } = await firebaseApp.auth().createUserWithEmailAndPassword(email, password);\r\n    console.log('signupAPI', user)\r\n    if (user){\r\n        let imageURL = '';\r\n        const StorageRef = firebaseApp.storage().ref(\"User/\" + user.uid + \"/profile.jpg\");\r\n        if (image) {\r\n            const snapshot = await StorageRef.put(image);\r\n            imageURL = await snapshot.ref.getDownloadURL();\r\n        }\r\n        user.updateProfile({\r\n            displayName: name,\r\n            photoURL: imageURL\r\n        });\r\n        db.collection('User').doc(user.uid)\r\n            .set({\r\n                email,\r\n                name,\r\n                profileImage: imageURL\r\n            })\r\n            .then(() => {\r\n                return {\r\n                    uid: user.uid,\r\n                    name,\r\n                    email,\r\n                    imageURL,\r\n                };\r\n            });\r\n    }\r\n    else return {};\r\n}\r\nfunction* signUpUser(action: ReturnType<typeof SignUp_User_Request>) {\r\n    try {\r\n        const result: StateType = yield call(signUpUserAPI, action.payload);\r\n        console.log('signup payload result', result);\r\n        yield put(SignUp_User_Success(result));\r\n    } catch(error) {\r\n        console.error(error);\r\n        yield put(SignUp_User_Failure(error));\r\n    }\r\n};\r\nfunction* watchSignUpUser() {\r\n    yield takeLatest(SIGNUP_USER_REQUEST, signUpUser);\r\n}\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n        fork(watchLogInUser),\r\n        fork(watchLogOutUser),\r\n        fork(watchSignUpUser),\r\n    ]);\r\n};","import { all, call } from 'redux-saga/effects';\r\nimport user from 'sagas/user';\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        call(user),\r\n    ]);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport GlobalStyle from 'styles/GlobalStyle';\r\n// 라우터\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n// Redux 기본 Setting\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\n// Redux / Saga 나의 Setting\r\nimport rootReducer from 'reducers';\r\nimport rootSaga from 'sagas';\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(rootSaga);\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <GlobalStyle/>\r\n        <Router>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}